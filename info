Development
bash
npm start
# or for development with auto-reload
npm run dev
Production
bash
npm run production
Visit http://localhost:3000 to see the tools in action!

🛠️ Available Tools
Encoding/Decoding
Base64 Text & File encoding/decoding

URL encoding/decoding

HTML escape/unescape

JWT decoder

Generators
Password generator

UUID generator

Random string generator

Lorem Ipsum generator

Converters
JSON ↔ XML converter

CSV → JSON/XML converter

Color converter (HEX/RGB)

Unit converter

Validators & Formatters
Credit card validator

IP/MAC address validator

JSON validator & formatter

SQL formatter

Web Tools
Text comparison

String length calculator

Case converter

Checksum calculator

QR code generator

🌐 API Usage
All tools are available via REST API:

javascript
// Generate UUID
fetch('/api/generate/uuid', {
  method: 'POST'
})
.then(response => response.json())
.then(data => console.log(data.uuid));

// Calculate hash
fetch('/api/generate/hash', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    text: 'hello world',
    algorithm: 'sha256'
  })
});
See API Documentation for complete endpoint list.

🚀 Deployment
Single Server
bash
npm start
Multi-Server with Cloudflare
Deploy to multiple servers in different regions

Set up Cloudflare Load Balancer

Configure SSL with Let's Encrypt

Enable caching and CDN

Docker
bash
docker build -t developer-tools .
docker run -p 3000:3000 developer-tools
📊 Visitor Tracking
The application includes built-in visitor tracking:

Tracks web page visits and API usage separately

Persistent storage in JSON file

Real-time counter updates

No personal data collected

🔧 Configuration
Create .env file:

env
PORT=3000
NODE_ENV=production
CLOUDFLARE_ZONE_ID=your_zone_id
🤝 Contributing
Fork the project

Create your feature branch (git checkout -b feature/AmazingFeature)

Commit your changes (git commit -m 'Add some AmazingFeature')

Push to the branch (git push origin feature/AmazingFeature)

Open a Pull Request

📝 License
This project is licensed under the MIT License - see the LICENSE file for details.

👨‍💻 Author
Mohamed Elsaadouni

Website: elsaadouni.com

GitHub: @elsaadouni

Buy Me a Coffee: buymeacoffee.com/elsaadouni

🙏 Acknowledgments
Icons by Font Awesome

Styling with Tailwind CSS

Deployed with Cloudflare

text

### package.json
```json
{
  "name": "ultimate-developer-tools",
  "version": "1.0.0",
  "description": "Comprehensive collection of 30+ developer utilities and tools",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "production": "NODE_ENV=production node server.js",
    "test": "node test_bulk.js",
    "docker:build": "docker build -t developer-tools .",
    "docker:run": "docker run -p 3000:3000 developer-tools"
  },
  "keywords": [
    "developer-tools",
    "utilities",
    "base64",
    "converter",
    "generator",
    "api"
  ],
  "author": "Mohamed Elsaadouni",
  "license": "MIT",
  "dependencies": {
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.0"
  },
  "engines": {
    "node": ">=14.0.0"
  }
}
API.md
markdown
# API Documentation

## Base URLs
- Production: `https://tools.elsaadouni.com`
- Local: `http://localhost:3000`

## Endpoints

### Health Check
`GET /api/health`

### Visitor Statistics
`GET /api/visitors/stats`

### Encoding/Decoding
- `POST /api/base64/encode` - Encode text to Base64
- `POST /api/base64/decode` - Decode Base64 to text
- `POST /api/convert/url-encode` - URL encode text
- `POST /api/convert/url-decode` - URL decode text
- `POST /api/tools/html-escape` - Escape HTML
- `POST /api/tools/html-unescape` - Unescape HTML

### Generators
- `POST /api/generate/uuid` - Generate UUID
- `POST /api/generate/password` - Generate password
- `POST /api/generate/random` - Generate random string
- `POST /api/generate/hash` - Calculate hash

### Converters
- `POST /api/convert/json-to-xml` - JSON to XML
- `POST /api/convert/xml-to-json` - XML to JSON
- `POST /api/convert/csv-to-json` - CSV to JSON
- `POST /api/convert/csv-to-xml` - CSV to XML
- `POST /api/tools/convert-case` - Convert text case

### Validators & Formatters
- `POST /api/format/json` - Format JSON
- `POST /api/format/json-minify` - Minify JSON
- `POST /api/tools/format-sql` - Format SQL
- `POST /api/tools/validate-credit-card` - Validate credit card
- `POST /api/tools/validate-ip` - Validate IP address
- `POST /api/tools/validate-mac` - Validate MAC address

### Other Tools
- `POST /api/decode/jwt` - Decode JWT token
- `POST /api/compare/text` - Compare two texts
- `POST /api/tools/string-length` - Calculate string length
- `POST /api/tools/lorem-ipsum` - Generate Lorem Ipsum
- `POST /api/tools/checksum` - Calculate checksum
- `POST /api/tools/qr-code` - Generate QR code
Dockerfile
dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install --production

# Copy source code
COPY . .

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Change ownership
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

CMD ["npm", "start"]
.env.example
env
PORT=3000
NODE_ENV=production
.gitignore
gitignore
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.env
visitors.json
.DS_Store
*.log
2. Multi-Server Deployment Guide
Server Setup Script (deploy.sh)
bash
#!/bin/bash

# Ultimate Developer Tools Deployment Script
echo "🚀 Deploying Ultimate Developer Tools..."

# Update system
sudo apt update && sudo apt upgrade -y

# Install Node.js
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs

# Install PM2
sudo npm install -g pm2

# Create application directory
sudo mkdir -p /opt/developer-tools
sudo chown $USER:$USER /opt/developer-tools

# Clone or copy your application
cd /opt/developer-tools
# git clone https://github.com/elsaadouni/ultimate-developer-tools.git .

# Install dependencies
npm install --production

# Setup PM2
pm2 start server.js --name "developer-tools"
pm2 startup
pm2 save

# Setup firewall
sudo ufw allow 22
sudo ufw allow 3000
sudo ufw enable

echo "✅ Deployment complete! Server running on port 3000"
Cloudflare Configuration
Add Domains to Cloudflare:

Add your domain to Cloudflare

Update nameservers

SSL/TLS Settings:

Set to "Full" (strict)

Enable Always Use HTTPS

Enable HTTP/2 and HTTP/3

Load Balancer Setup:

yaml
# Create load balancer with multiple origins
Origins:
  - US East: server1.elsaadouni.com:3000
  - EU West: server2.elsaadouni.com:3000  
  - Asia Pacific: server3.elsaadouni.com:3000

Health Checks: /api/health
Strategy: Round Robin
Page Rules:

tools.elsaadouni.com/* - Cache Level: Standard

tools.elsaadouni.com/api/* - Cache Level: Bypass

SSL with Let's Encrypt
bash
# On each server, install certbot
sudo apt install certbot python3-certbot-nginx -y

# Get certificate
sudo certbot --nginx -d tools.elsaadouni.com

# Auto-renewal
sudo crontab -e
# Add: 0 12 * * * /usr/bin/certbot renew --quiet
Nginx Configuration (nginx.conf)
nginx
server {
    listen 80;
    server_name tools.elsaadouni.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name tools.elsaadouni.com;

    ssl_certificate /etc/letsencrypt/live/tools.elsaadouni.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/tools.elsaadouni.com/privkey.pem;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Health check endpoint
    location /api/health {
        access_log off;
        proxy_pass http://localhost:3000/api/health;
    }
}
3. Repository Structure
text
ultimate-developer-tools/
├── server.js
├── package.json
├── README.md
├── API.md
├── Dockerfile
├── .env.example
├── .gitignore
├── deploy.sh
├── nginx.conf
└── test_bulk.js
4. Create GitHub Repository
bash
# Initialize git
git init
git add .
git commit -m "Initial commit: Ultimate Developer Tools v1.0"

# Create GitHub repo and push
gh repo create ultimate-developer-tools --public --description "Comprehensive collection of 30+ developer utilities and tools"
git push -u origin main
5. Deployment Commands
bash
# Single server deployment
chmod +x deploy.sh
./deploy.sh

# Docker deployment
npm run docker:build
npm run docker:run

# Multi-region deployment (run on each server)
scp deploy.sh user@server:/tmp/
ssh user@server "bash /tmp/deploy.sh"
This setup gives you:

✅ Multi-server deployment with load balancing

✅ SSL certificates via Let's Encrypt

✅ Cloudflare CDN & protection

✅ Professional GitHub repository

✅ Docker support

✅ Easy deployment scripts

✅ Comprehensive documentation

